// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modbus.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ModbusImp.Service {

  /// <summary>Holder for reflection information generated from modbus.proto</summary>
  public static partial class ModbusReflection {

    #region Descriptor
    /// <summary>File descriptor for modbus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModbusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxtb2RidXMucHJvdG8SEU1vZGJ1c0ltcC5TZXJ2aWNlIloKClRDUFJlcXVl",
            "c3QSDwoHc2xhdmVJZBgBIAEoDRIUCgxmdW5jdGlvbkNvZGUYAiABKA0SFAoM",
            "c3RhcnRBZGRyZXNzGAMgASgNEg8KB3JlYWRDbnQYBCABKA0iGgoLVENQUmVz",
            "cG9uc2USCwoDc2VxGAEgASgJMlMKBk1vZGJ1cxJJCgZHZXRUQ1ASHS5Nb2Ri",
            "dXNJbXAuU2VydmljZS5UQ1BSZXF1ZXN0Gh4uTW9kYnVzSW1wLlNlcnZpY2Uu",
            "VENQUmVzcG9uc2UiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ModbusImp.Service.TCPRequest), global::ModbusImp.Service.TCPRequest.Parser, new[]{ "SlaveId", "FunctionCode", "StartAddress", "ReadCnt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ModbusImp.Service.TCPResponse), global::ModbusImp.Service.TCPResponse.Parser, new[]{ "Seq" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The request message containing Modbus TCP values
  /// </summary>
  public sealed partial class TCPRequest : pb::IMessage<TCPRequest> {
    private static readonly pb::MessageParser<TCPRequest> _parser = new pb::MessageParser<TCPRequest>(() => new TCPRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TCPRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ModbusImp.Service.ModbusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPRequest(TCPRequest other) : this() {
      slaveId_ = other.slaveId_;
      functionCode_ = other.functionCode_;
      startAddress_ = other.startAddress_;
      readCnt_ = other.readCnt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPRequest Clone() {
      return new TCPRequest(this);
    }

    /// <summary>Field number for the "slaveId" field.</summary>
    public const int SlaveIdFieldNumber = 1;
    private uint slaveId_;
    /// <summary>
    /// Slave device ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlaveId {
      get { return slaveId_; }
      set {
        slaveId_ = value;
      }
    }

    /// <summary>Field number for the "functionCode" field.</summary>
    public const int FunctionCodeFieldNumber = 2;
    private uint functionCode_;
    /// <summary>
    /// Modbus function code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FunctionCode {
      get { return functionCode_; }
      set {
        functionCode_ = value;
      }
    }

    /// <summary>Field number for the "startAddress" field.</summary>
    public const int StartAddressFieldNumber = 3;
    private uint startAddress_;
    /// <summary>
    /// Reading start address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartAddress {
      get { return startAddress_; }
      set {
        startAddress_ = value;
      }
    }

    /// <summary>Field number for the "readCnt" field.</summary>
    public const int ReadCntFieldNumber = 4;
    private uint readCnt_;
    /// <summary>
    /// Number of readed bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReadCnt {
      get { return readCnt_; }
      set {
        readCnt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TCPRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TCPRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SlaveId != other.SlaveId) return false;
      if (FunctionCode != other.FunctionCode) return false;
      if (StartAddress != other.StartAddress) return false;
      if (ReadCnt != other.ReadCnt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SlaveId != 0) hash ^= SlaveId.GetHashCode();
      if (FunctionCode != 0) hash ^= FunctionCode.GetHashCode();
      if (StartAddress != 0) hash ^= StartAddress.GetHashCode();
      if (ReadCnt != 0) hash ^= ReadCnt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SlaveId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SlaveId);
      }
      if (FunctionCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FunctionCode);
      }
      if (StartAddress != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(StartAddress);
      }
      if (ReadCnt != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ReadCnt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SlaveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlaveId);
      }
      if (FunctionCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FunctionCode);
      }
      if (StartAddress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartAddress);
      }
      if (ReadCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReadCnt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TCPRequest other) {
      if (other == null) {
        return;
      }
      if (other.SlaveId != 0) {
        SlaveId = other.SlaveId;
      }
      if (other.FunctionCode != 0) {
        FunctionCode = other.FunctionCode;
      }
      if (other.StartAddress != 0) {
        StartAddress = other.StartAddress;
      }
      if (other.ReadCnt != 0) {
        ReadCnt = other.ReadCnt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlaveId = input.ReadUInt32();
            break;
          }
          case 16: {
            FunctionCode = input.ReadUInt32();
            break;
          }
          case 24: {
            StartAddress = input.ReadUInt32();
            break;
          }
          case 32: {
            ReadCnt = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the Modbus TCP answer values
  /// </summary>
  public sealed partial class TCPResponse : pb::IMessage<TCPResponse> {
    private static readonly pb::MessageParser<TCPResponse> _parser = new pb::MessageParser<TCPResponse>(() => new TCPResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TCPResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ModbusImp.Service.ModbusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPResponse(TCPResponse other) : this() {
      seq_ = other.seq_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPResponse Clone() {
      return new TCPResponse(this);
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 1;
    private string seq_ = "";
    /// <summary>
    /// Sequence of readed bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TCPResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TCPResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seq != other.Seq) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seq.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Seq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TCPResponse other) {
      if (other == null) {
        return;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Seq = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
