# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import modbus_pb2 as modbus__pb2


class ModbusStub(object):
  """Modbus service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetTCP = channel.unary_unary(
        '/ModbusImp.Service.Modbus/GetTCP',
        request_serializer=modbus__pb2.TCPRequest.SerializeToString,
        response_deserializer=modbus__pb2.TCPResponse.FromString,
        )


class ModbusServicer(object):
  """Modbus service definition.
  """

  def GetTCP(self, request, context):
    """Handles TCP request to Modbus device.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ModbusServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetTCP': grpc.unary_unary_rpc_method_handler(
          servicer.GetTCP,
          request_deserializer=modbus__pb2.TCPRequest.FromString,
          response_serializer=modbus__pb2.TCPResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ModbusImp.Service.Modbus', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
